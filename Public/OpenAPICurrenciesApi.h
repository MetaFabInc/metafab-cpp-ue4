/**
 * MetaFab API
 * Complete MetaFab API references and guides can be found at: https://trymetafab.com
 *
 * OpenAPI spec version: 1.5.1
 * Contact: metafabproject@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#pragma once

#include "CoreMinimal.h"
#include "OpenAPIBaseModel.h"

namespace OpenAPI
{

class OPENAPI_API OpenAPICurrenciesApi
{
public:
	OpenAPICurrenciesApi();
	~OpenAPICurrenciesApi();

	/* Sets the URL Endpoint.
	* Note: several fallback endpoints can be configured in request retry policies, see Request::SetShouldRetry */
	void SetURL(const FString& Url);

	/* Adds global header params to all requests */
	void AddHeaderParam(const FString& Key, const FString& Value);
	void ClearHeaderParams();

	/* Sets the retry manager to the user-defined retry manager. User must manage the lifetime of the retry manager.
	* If no retry manager is specified and a request needs retries, a default retry manager will be used.
	* See also: Request::SetShouldRetry */
	void SetHttpRetryManager(FHttpRetrySystem::FManager& RetryManager);
	FHttpRetrySystem::FManager& GetHttpRetryManager();

	class BatchTransferCurrencyRequest;
	class BatchTransferCurrencyResponse;
	class BurnCurrencyRequest;
	class BurnCurrencyResponse;
	class CreateCurrencyRequest;
	class CreateCurrencyResponse;
	class GetCurrenciesRequest;
	class GetCurrenciesResponse;
	class GetCurrencyBalanceRequest;
	class GetCurrencyBalanceResponse;
	class GetCurrencyFeesRequest;
	class GetCurrencyFeesResponse;
	class GetCurrencyRoleRequest;
	class GetCurrencyRoleResponse;
	class GrantCurrencyRoleRequest;
	class GrantCurrencyRoleResponse;
	class MintCurrencyRequest;
	class MintCurrencyResponse;
	class RevokeCurrencyRoleRequest;
	class RevokeCurrencyRoleResponse;
	class SetCurrencyFeesRequest;
	class SetCurrencyFeesResponse;
	class TransferCurrencyRequest;
	class TransferCurrencyResponse;
	
    DECLARE_DELEGATE_OneParam(FBatchTransferCurrencyDelegate, const BatchTransferCurrencyResponse&);
    DECLARE_DELEGATE_OneParam(FBurnCurrencyDelegate, const BurnCurrencyResponse&);
    DECLARE_DELEGATE_OneParam(FCreateCurrencyDelegate, const CreateCurrencyResponse&);
    DECLARE_DELEGATE_OneParam(FGetCurrenciesDelegate, const GetCurrenciesResponse&);
    DECLARE_DELEGATE_OneParam(FGetCurrencyBalanceDelegate, const GetCurrencyBalanceResponse&);
    DECLARE_DELEGATE_OneParam(FGetCurrencyFeesDelegate, const GetCurrencyFeesResponse&);
    DECLARE_DELEGATE_OneParam(FGetCurrencyRoleDelegate, const GetCurrencyRoleResponse&);
    DECLARE_DELEGATE_OneParam(FGrantCurrencyRoleDelegate, const GrantCurrencyRoleResponse&);
    DECLARE_DELEGATE_OneParam(FMintCurrencyDelegate, const MintCurrencyResponse&);
    DECLARE_DELEGATE_OneParam(FRevokeCurrencyRoleDelegate, const RevokeCurrencyRoleResponse&);
    DECLARE_DELEGATE_OneParam(FSetCurrencyFeesDelegate, const SetCurrencyFeesResponse&);
    DECLARE_DELEGATE_OneParam(FTransferCurrencyDelegate, const TransferCurrencyResponse&);
    
    FHttpRequestPtr BatchTransferCurrency(const BatchTransferCurrencyRequest& Request, const FBatchTransferCurrencyDelegate& Delegate = FBatchTransferCurrencyDelegate()) const;
    FHttpRequestPtr BurnCurrency(const BurnCurrencyRequest& Request, const FBurnCurrencyDelegate& Delegate = FBurnCurrencyDelegate()) const;
    FHttpRequestPtr CreateCurrency(const CreateCurrencyRequest& Request, const FCreateCurrencyDelegate& Delegate = FCreateCurrencyDelegate()) const;
    FHttpRequestPtr GetCurrencies(const GetCurrenciesRequest& Request, const FGetCurrenciesDelegate& Delegate = FGetCurrenciesDelegate()) const;
    FHttpRequestPtr GetCurrencyBalance(const GetCurrencyBalanceRequest& Request, const FGetCurrencyBalanceDelegate& Delegate = FGetCurrencyBalanceDelegate()) const;
    FHttpRequestPtr GetCurrencyFees(const GetCurrencyFeesRequest& Request, const FGetCurrencyFeesDelegate& Delegate = FGetCurrencyFeesDelegate()) const;
    FHttpRequestPtr GetCurrencyRole(const GetCurrencyRoleRequest& Request, const FGetCurrencyRoleDelegate& Delegate = FGetCurrencyRoleDelegate()) const;
    FHttpRequestPtr GrantCurrencyRole(const GrantCurrencyRoleRequest& Request, const FGrantCurrencyRoleDelegate& Delegate = FGrantCurrencyRoleDelegate()) const;
    FHttpRequestPtr MintCurrency(const MintCurrencyRequest& Request, const FMintCurrencyDelegate& Delegate = FMintCurrencyDelegate()) const;
    FHttpRequestPtr RevokeCurrencyRole(const RevokeCurrencyRoleRequest& Request, const FRevokeCurrencyRoleDelegate& Delegate = FRevokeCurrencyRoleDelegate()) const;
    FHttpRequestPtr SetCurrencyFees(const SetCurrencyFeesRequest& Request, const FSetCurrencyFeesDelegate& Delegate = FSetCurrencyFeesDelegate()) const;
    FHttpRequestPtr TransferCurrency(const TransferCurrencyRequest& Request, const FTransferCurrencyDelegate& Delegate = FTransferCurrencyDelegate()) const;
    
private:
    void OnBatchTransferCurrencyResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FBatchTransferCurrencyDelegate Delegate) const;
    void OnBurnCurrencyResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FBurnCurrencyDelegate Delegate) const;
    void OnCreateCurrencyResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FCreateCurrencyDelegate Delegate) const;
    void OnGetCurrenciesResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FGetCurrenciesDelegate Delegate) const;
    void OnGetCurrencyBalanceResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FGetCurrencyBalanceDelegate Delegate) const;
    void OnGetCurrencyFeesResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FGetCurrencyFeesDelegate Delegate) const;
    void OnGetCurrencyRoleResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FGetCurrencyRoleDelegate Delegate) const;
    void OnGrantCurrencyRoleResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FGrantCurrencyRoleDelegate Delegate) const;
    void OnMintCurrencyResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FMintCurrencyDelegate Delegate) const;
    void OnRevokeCurrencyRoleResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FRevokeCurrencyRoleDelegate Delegate) const;
    void OnSetCurrencyFeesResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FSetCurrencyFeesDelegate Delegate) const;
    void OnTransferCurrencyResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FTransferCurrencyDelegate Delegate) const;
    
	FHttpRequestRef CreateHttpRequest(const Request& Request) const;
	bool IsValid() const;
	void HandleResponse(FHttpResponsePtr HttpResponse, bool bSucceeded, Response& InOutResponse) const;

	FString Url;
	TMap<FString,FString> AdditionalHeaderParams;
	mutable FHttpRetrySystem::FManager* RetryManager = nullptr;
	mutable TUniquePtr<HttpRetryManager> DefaultRetryManager;
};

}
