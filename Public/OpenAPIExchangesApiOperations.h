/**
 * MetaFab API
 *  Complete MetaFab API references and guides can be found at: https://trymetafab.com
 *
 * OpenAPI spec version: 1.2.1
 * Contact: metafabproject@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#pragma once

#include "OpenAPIBaseModel.h"
#include "OpenAPIExchangesApi.h"

#include "OpenAPICreateExchange200Response.h"
#include "OpenAPICreateExchangeRequest.h"
#include "OpenAPIExchangeOffer.h"
#include "OpenAPIGetExchanges200ResponseInner.h"
#include "OpenAPISetExchangeOfferRequest.h"
#include "OpenAPITransactionModel.h"
#include "OpenAPIWithdrawFromExchangeRequest.h"

namespace MetaFab
{

/* Create exchange
 *
 * Creates a new game exchange and deploys a exchange contract on behalf of the authenticating game&#39;s primary wallet. The deployed exchange contract allows you to create fixed price rates for players to buy specific items from any item collection or ERC1155 contract. Additionally, an exchange allows you to create exchange offers for some set of item(s) to another set of item(s) or any mix of currency. Exchanges completely supports gasless player transactions.
*/
class METAFAB_API OpenAPIExchangesApi::CreateExchangeRequest : public Request
{
public:
    virtual ~CreateExchangeRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

	/* The `secretKey` of the authenticating game. */
	FString XAuthorization;
	/* The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet. */
	FString XPassword;
	OpenAPICreateExchangeRequest OpenAPICreateExchangeRequest;
};

class METAFAB_API OpenAPIExchangesApi::CreateExchangeResponse : public Response
{
public:
    virtual ~CreateExchangeResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    OpenAPICreateExchange200Response Content;
};

/* Get exchange offer
 *
 * Returns a exchange offer object for the provided exchangeOfferId.
*/
class METAFAB_API OpenAPIExchangesApi::GetExchangeOfferRequest : public Request
{
public:
    virtual ~GetExchangeOfferRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

	/* Any exchange id within the MetaFab ecosystem. */
	FString ExchangeId;
	/* Any offer id for the exchange. Zero, or a positive integer. */
	FString ExchangeOfferId;
};

class METAFAB_API OpenAPIExchangesApi::GetExchangeOfferResponse : public Response
{
public:
    virtual ~GetExchangeOfferResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    OpenAPIExchangeOffer Content;
};

/* Get exchange offers
 *
 * Returns all exchange offers as an array of exchange offer objects.
*/
class METAFAB_API OpenAPIExchangesApi::GetExchangeOffersRequest : public Request
{
public:
    virtual ~GetExchangeOffersRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

	/* Any exchange id within the MetaFab ecosystem. */
	FString ExchangeId;
};

class METAFAB_API OpenAPIExchangesApi::GetExchangeOffersResponse : public Response
{
public:
    virtual ~GetExchangeOffersResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    TArray<OpenAPIExchangeOffer> Content;
};

/* Get exchanges
 *
 * Returns an array of active exchanges for the game associated with the provided &#x60;X-Game-Key&#x60;.
*/
class METAFAB_API OpenAPIExchangesApi::GetExchangesRequest : public Request
{
public:
    virtual ~GetExchangesRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

	/* The `publishedKey` of a specific game. This can be shared or included in game clients, websites, etc. */
	FString XGameKey;
};

class METAFAB_API OpenAPIExchangesApi::GetExchangesResponse : public Response
{
public:
    virtual ~GetExchangesResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    TArray<OpenAPIGetExchanges200ResponseInner> Content;
};

/* Remove exchange offer
 *
 * Removes the provided offerId from the provided exchange. Removed offers can no longer be used.
*/
class METAFAB_API OpenAPIExchangesApi::RemoveExchangeOfferRequest : public Request
{
public:
    virtual ~RemoveExchangeOfferRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

	/* Any exchange id within the MetaFab ecosystem. */
	FString ExchangeId;
	/* Any offer id for the exchange. Zero, or a positive integer. */
	FString ExchangeOfferId;
	/* The `secretKey` of the authenticating game. */
	FString XAuthorization;
	/* The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet. */
	FString XPassword;
};

class METAFAB_API OpenAPIExchangesApi::RemoveExchangeOfferResponse : public Response
{
public:
    virtual ~RemoveExchangeOfferResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    OpenAPITransactionModel Content;
};

/* Set exchange offer
 *
 * Sets a new exchange offer or updates an existing one for the provided id. Exchange offers allow currency to item, item to currency or item to item exchanges.  All request fields besides &#x60;id&#x60; are optional. Any optional fields omitted will not be used for the offer. This allows you to create many different combinations of offers. For example, you can create an offer that may require 3 unique item ids of specified quantities from a given item collection and gives the user 1 new unique item id in exchange.  Another example, you may want to make an exchange offer from one ERC20 token to another. This is also possible - simple set the input and output currency fields and leave the others blank.
*/
class METAFAB_API OpenAPIExchangesApi::SetExchangeOfferRequest : public Request
{
public:
    virtual ~SetExchangeOfferRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

	/* Any exchange id within the MetaFab ecosystem. */
	FString ExchangeId;
	/* The `secretKey` of the authenticating game. */
	FString XAuthorization;
	/* The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet. */
	FString XPassword;
	OpenAPISetExchangeOfferRequest OpenAPISetExchangeOfferRequest;
};

class METAFAB_API OpenAPIExchangesApi::SetExchangeOfferResponse : public Response
{
public:
    virtual ~SetExchangeOfferResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    OpenAPITransactionModel Content;
};

/* Use exchange offer
 *
 * Uses an exchange offer. The required (input) item(s) and/or currency are removed from the wallet or player wallet using the offer. The given (output) item(s) and/or currency are given to the wallet or player wallet using the offer.
*/
class METAFAB_API OpenAPIExchangesApi::UseExchangeOfferRequest : public Request
{
public:
    virtual ~UseExchangeOfferRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

	/* Any exchange id within the MetaFab ecosystem. */
	FString ExchangeId;
	/* Any offer id for the exchange. Zero, or a positive integer. */
	FString ExchangeOfferId;
	/* The `secretKey` of a specific game or the `accessToken` of a specific player. */
	FString XAuthorization;
	/* The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet. */
	FString XPassword;
};

class METAFAB_API OpenAPIExchangesApi::UseExchangeOfferResponse : public Response
{
public:
    virtual ~UseExchangeOfferResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    OpenAPITransactionModel Content;
};

/* Withdraw from exchange
 *
 * Withdraws native token, currency or items from a exchange. Whenever an exchange offer has input requirements, the native tokens, currencies or items for the requirements of that offer are deposited into the exchange contract when the offer is used. These can be withdrawn to any other address.
*/
class METAFAB_API OpenAPIExchangesApi::WithdrawFromExchangeRequest : public Request
{
public:
    virtual ~WithdrawFromExchangeRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

	/* Any exchange id within the MetaFab ecosystem. */
	FString ExchangeId;
	/* The `secretKey` of the authenticating game. */
	FString XAuthorization;
	/* The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet. */
	FString XPassword;
	OpenAPIWithdrawFromExchangeRequest OpenAPIWithdrawFromExchangeRequest;
};

class METAFAB_API OpenAPIExchangesApi::WithdrawFromExchangeResponse : public Response
{
public:
    virtual ~WithdrawFromExchangeResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    OpenAPITransactionModel Content;
};

}
