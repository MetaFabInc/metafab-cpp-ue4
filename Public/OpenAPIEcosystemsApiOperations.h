/**
 * MetaFab API
 * Complete MetaFab API references and guides can be found at: https://trymetafab.com
 *
 * OpenAPI spec version: 1.5.1
 * Contact: metafabproject@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#pragma once

#include "OpenAPIBaseModel.h"
#include "OpenAPIEcosystemsApi.h"

#include "OpenAPIApproveEcosystemGameRequest.h"
#include "OpenAPIAuthPlayer200Response.h"
#include "OpenAPIAuthProfile200Response.h"
#include "OpenAPICreateEcosystemRequest.h"
#include "OpenAPICreateProfilePlayerRequest.h"
#include "OpenAPICreateProfileRequest.h"
#include "OpenAPIEcosystemModel.h"
#include "OpenAPIGetProfileGames200ResponseInner.h"
#include "OpenAPIProfileModel.h"
#include "OpenAPIPublicEcosystem.h"
#include "OpenAPIPublicGame.h"
#include "OpenAPIUpdateEcosystemRequest.h"
#include "OpenAPIUpdateProfilePlayer200Response.h"
#include "OpenAPIUpdateProfilePlayerRequest.h"
#include "OpenAPIUpdateProfileRequest.h"

namespace OpenAPI
{

/* Approve ecosystem game
 *
 * Approves a game for an ecosystem. By approving a game, it allows that game to integrate the ability for profile accounts from an ecosystem to login directly to the approved game and play. This also allows games to request access to assets held at the profile level for the game to frictionlessly interact with on behalf of the profile.
*/
class OPENAPI_API OpenAPIEcosystemsApi::ApproveEcosystemGameRequest : public Request
{
public:
    virtual ~ApproveEcosystemGameRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

	/* The ecosystem id of the authenticating ecosystem. */
	FString EcosystemId;
	/* The `secretKey` of the authenticating ecosystem. */
	FString XAuthorization;
	OpenAPIApproveEcosystemGameRequest OpenAPIApproveEcosystemGameRequest;
};

class OPENAPI_API OpenAPIEcosystemsApi::ApproveEcosystemGameResponse : public Response
{
public:
    virtual ~ApproveEcosystemGameResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    
};

/* Authenticate ecosystem
 *
 * Returns an existing ecosystem object containing authorization keys when provided a valid email (in place of username) and password login using Basic Auth.
*/
class OPENAPI_API OpenAPIEcosystemsApi::AuthEcosystemRequest : public Request
{
public:
    virtual ~AuthEcosystemRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

};

class OPENAPI_API OpenAPIEcosystemsApi::AuthEcosystemResponse : public Response
{
public:
    virtual ~AuthEcosystemResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    OpenAPIEcosystemModel Content;
};

/* Authenticate profile
 *
 * Returns an existing profile object containing access token, wallet, and other details when provided a valid profile username and password login using Basic Auth.
*/
class OPENAPI_API OpenAPIEcosystemsApi::AuthProfileRequest : public Request
{
public:
    virtual ~AuthProfileRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

	/* The `publishedKey` of a specific ecosystem. This can be shared or included in clients, websites, etc. */
	FString XEcosystemKey;
};

class OPENAPI_API OpenAPIEcosystemsApi::AuthProfileResponse : public Response
{
public:
    virtual ~AuthProfileResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    OpenAPIAuthProfile200Response Content;
};

/* Authenticate profile player
 *
 * Returns an existing player object containing access token, wallet, wallet decrypt key, profile authorization and other details for a game when provided profile authentication and the player&#39;s username.
*/
class OPENAPI_API OpenAPIEcosystemsApi::AuthProfilePlayerRequest : public Request
{
public:
    virtual ~AuthProfilePlayerRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

	/* The profile id of the authenticating profile. */
	FString ProfileId;
	/* Any game id within the MetaFab platform. */
	FString GameId;
	/* The `accessToken` of the authenticating profile. */
	FString XAuthorization;
	/* The `walletDecryptKey` of the authenticating profile. Required to decrypt and perform blockchain transactions with the profile wallet. */
	FString XWalletDecryptKey;
	/* The username of a player. */
	FString XUsername;
};

class OPENAPI_API OpenAPIEcosystemsApi::AuthProfilePlayerResponse : public Response
{
public:
    virtual ~AuthProfilePlayerResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    OpenAPIAuthPlayer200Response Content;
};

/* Create ecosystem
 *
 * Create a new ecosystem. An ecosystem is a parent entity that many profiles live under for a given ecosystem of games. Ecosystems allow your players to create one profile within your ecosystem that allows a single account and wallet to be used across all of the approved games in your ecosystem that they play.
*/
class OPENAPI_API OpenAPIEcosystemsApi::CreateEcosystemRequest : public Request
{
public:
    virtual ~CreateEcosystemRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

	OpenAPICreateEcosystemRequest OpenAPICreateEcosystemRequest;
};

class OPENAPI_API OpenAPIEcosystemsApi::CreateEcosystemResponse : public Response
{
public:
    virtual ~CreateEcosystemResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    OpenAPIEcosystemModel Content;
};

/* Create profile
 *
 * Create a new profile. Profiles are automatically associated with an internally managed wallet. Profiles can be thought of as a umbrella account that can be used to sign into and create player accounts across many games and have a singular asset store wallet at the profile level that can be used across all connected player accounts for games those player accounts are a part of.  Profiles are associated to a parent ecosystem of games. This allows an ecosystem to approve a permissioned set of games that can request authorized wallet permissions from profiles of players for their game.
*/
class OPENAPI_API OpenAPIEcosystemsApi::CreateProfileRequest : public Request
{
public:
    virtual ~CreateProfileRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

	/* The `publishedKey` of a specific ecosystem. This can be shared or included in clients, websites, etc. */
	FString XEcosystemKey;
	OpenAPICreateProfileRequest OpenAPICreateProfileRequest;
};

class OPENAPI_API OpenAPIEcosystemsApi::CreateProfileResponse : public Response
{
public:
    virtual ~CreateProfileResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    OpenAPIAuthProfile200Response Content;
};

/* Create profile player
 *
 * Creates a new player account for the provided game id linked to the authenticating profile. The created player account will default to using the parent profile&#39;s wallet for any transactions, wallet content balance checks and verifications, and more.
*/
class OPENAPI_API OpenAPIEcosystemsApi::CreateProfilePlayerRequest : public Request
{
public:
    virtual ~CreateProfilePlayerRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

	/* The profile id of the authenticating profile. */
	FString ProfileId;
	/* Any game id within the MetaFab platform. */
	FString GameId;
	/* The `accessToken` of the authenticating profile. */
	FString XAuthorization;
	/* The `walletDecryptKey` of the authenticating profile. Required to decrypt and perform blockchain transactions with the profile wallet. */
	FString XWalletDecryptKey;
	OpenAPICreateProfilePlayerRequest OpenAPICreateProfilePlayerRequest;
};

class OPENAPI_API OpenAPIEcosystemsApi::CreateProfilePlayerResponse : public Response
{
public:
    virtual ~CreateProfilePlayerResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    OpenAPIAuthPlayer200Response Content;
};

/* Get ecosystem
 *
 * Returns a ecosystem object for the provided ecosystem id.
*/
class OPENAPI_API OpenAPIEcosystemsApi::GetEcosystemRequest : public Request
{
public:
    virtual ~GetEcosystemRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

	/* Any ecosystem id within the MetaFab platform. */
	FString EcosystemId;
};

class OPENAPI_API OpenAPIEcosystemsApi::GetEcosystemResponse : public Response
{
public:
    virtual ~GetEcosystemResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    OpenAPIPublicEcosystem Content;
};

/* Get ecosystem game
 *
 * Returns a game object for the provided game id that the ecosystem has approved.
*/
class OPENAPI_API OpenAPIEcosystemsApi::GetEcosystemGameRequest : public Request
{
public:
    virtual ~GetEcosystemGameRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

	/* Any ecosystem id within the MetaFab platform. */
	FString EcosystemId;
	/* Any game id within the MetaFab platform. */
	FString GameId;
};

class OPENAPI_API OpenAPIEcosystemsApi::GetEcosystemGameResponse : public Response
{
public:
    virtual ~GetEcosystemGameResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    OpenAPIPublicGame Content;
};

/* Get ecosystem games
 *
 * Returns an array of games the ecosystem has approved.
*/
class OPENAPI_API OpenAPIEcosystemsApi::GetEcosystemGamesRequest : public Request
{
public:
    virtual ~GetEcosystemGamesRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

	/* Any ecosystem id within the MetaFab platform. */
	FString EcosystemId;
};

class OPENAPI_API OpenAPIEcosystemsApi::GetEcosystemGamesResponse : public Response
{
public:
    virtual ~GetEcosystemGamesResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    TArray<OpenAPIPublicGame> Content;
};

/* Get profile game
 *
 * Returns a game this profile has connected player accounts for.
*/
class OPENAPI_API OpenAPIEcosystemsApi::GetProfileGameRequest : public Request
{
public:
    virtual ~GetProfileGameRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

	/* The profile id of the authenticating profile. */
	FString ProfileId;
	/* Any game id within the MetaFab platform. */
	FString GameId;
	/* The `accessToken` of the authenticating profile. */
	FString XAuthorization;
};

class OPENAPI_API OpenAPIEcosystemsApi::GetProfileGameResponse : public Response
{
public:
    virtual ~GetProfileGameResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    OpenAPIGetProfileGames200ResponseInner Content;
};

/* Get profile games
 *
 * Returns an array of games the authorized profile has connected player accounts for.
*/
class OPENAPI_API OpenAPIEcosystemsApi::GetProfileGamesRequest : public Request
{
public:
    virtual ~GetProfileGamesRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

	/* The profile id of the authenticating profile. */
	FString ProfileId;
	/* The `accessToken` of the authenticating profile. */
	FString XAuthorization;
};

class OPENAPI_API OpenAPIEcosystemsApi::GetProfileGamesResponse : public Response
{
public:
    virtual ~GetProfileGamesResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    TArray<OpenAPIGetProfileGames200ResponseInner> Content;
};

/* Unapprove ecosystem game
 *
 * Unapproves a game for an ecosystem. The game will no longer be able to allow profiles from the ecosystem to login. All profile permissions approved for the game will also be revoked.
*/
class OPENAPI_API OpenAPIEcosystemsApi::UnapproveEcosystemGameRequest : public Request
{
public:
    virtual ~UnapproveEcosystemGameRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

	/* The ecosystem id of the authenticating ecosystem. */
	FString EcosystemId;
	/* Any game id within the MetaFab platform. */
	FString GameId;
	/* The `secretKey` of the authenticating ecosystem. */
	FString XAuthorization;
};

class OPENAPI_API OpenAPIEcosystemsApi::UnapproveEcosystemGameResponse : public Response
{
public:
    virtual ~UnapproveEcosystemGameResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    
};

/* Update ecosystem
 *
 * Update various fields specific to an ecosystem. Such as changing its password, resetting its published or secret key, or updating its approved games.
*/
class OPENAPI_API OpenAPIEcosystemsApi::UpdateEcosystemRequest : public Request
{
public:
    virtual ~UpdateEcosystemRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

	/* The ecosystem id of the authenticating ecosystem. */
	FString EcosystemId;
	/* The `secretKey` of the authenticating ecosystem. */
	FString XAuthorization;
	OpenAPIUpdateEcosystemRequest OpenAPIUpdateEcosystemRequest;
};

class OPENAPI_API OpenAPIEcosystemsApi::UpdateEcosystemResponse : public Response
{
public:
    virtual ~UpdateEcosystemResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    OpenAPIEcosystemModel Content;
};

/* Update profile
 *
 * Update various fields specific to a profile. Such as changing its password and resetting its access token.
*/
class OPENAPI_API OpenAPIEcosystemsApi::UpdateProfileRequest : public Request
{
public:
    virtual ~UpdateProfileRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

	/* The profile id of the authenticating profile. */
	FString ProfileId;
	/* The `accessToken` of the authenticating profile. */
	FString XAuthorization;
	OpenAPIUpdateProfileRequest OpenAPIUpdateProfileRequest;
};

class OPENAPI_API OpenAPIEcosystemsApi::UpdateProfileResponse : public Response
{
public:
    virtual ~UpdateProfileResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    OpenAPIProfileModel Content;
};

/* Update profile player
 *
 * Update various fields specific to a player. Such as changing its permissions.
*/
class OPENAPI_API OpenAPIEcosystemsApi::UpdateProfilePlayerRequest : public Request
{
public:
    virtual ~UpdateProfilePlayerRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

	/* The profile id of the authenticating profile. */
	FString ProfileId;
	/* Any game id within the MetaFab platform. */
	FString GameId;
	/* Any player id within the MetaFab platform. */
	FString PlayerId;
	/* The `accessToken` of the authenticating profile. */
	FString XAuthorization;
	/* The `walletDecryptKey` of the authenticating profile. Required to decrypt and perform blockchain transactions with the profile wallet. */
	FString XWalletDecryptKey;
	OpenAPIUpdateProfilePlayerRequest OpenAPIUpdateProfilePlayerRequest;
};

class OPENAPI_API OpenAPIEcosystemsApi::UpdateProfilePlayerResponse : public Response
{
public:
    virtual ~UpdateProfilePlayerResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    OpenAPIUpdateProfilePlayer200Response Content;
};

}
