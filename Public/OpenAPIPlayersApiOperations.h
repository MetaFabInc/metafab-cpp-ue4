/**
 * MetaFab API
 *  Complete MetaFab API references and guides can be found at: https://trymetafab.com
 *
 * OpenAPI spec version: 1.4.1
 * Contact: metafabproject@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#pragma once

#include "OpenAPIBaseModel.h"
#include "OpenAPIPlayersApi.h"

#include "OpenAPIAuthPlayer200Response.h"
#include "OpenAPICreatePlayerRequest.h"
#include "OpenAPIGetPlayerData200Response.h"
#include "OpenAPIPlayerModel.h"
#include "OpenAPIPublicPlayer.h"
#include "OpenAPIRemovePlayerConnectedWalletRequest.h"
#include "OpenAPISetPlayerConnectedWallet200Response.h"
#include "OpenAPISetPlayerConnectedWalletRequest.h"
#include "OpenAPISetPlayerDataRequest.h"
#include "OpenAPIUpdatePlayerRequest.h"

namespace OpenAPI
{

/* Authenticate player
 *
 * Returns an existing player object containing access token, wallet, and other details for a game when provided a valid username and password login using Basic Auth.
*/
class OPENAPI_API OpenAPIPlayersApi::AuthPlayerRequest : public Request
{
public:
    virtual ~AuthPlayerRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

	/* The `publishedKey` of a specific game. This can be shared or included in game clients, websites, etc. */
	FString XGameKey;
};

class OPENAPI_API OpenAPIPlayersApi::AuthPlayerResponse : public Response
{
public:
    virtual ~AuthPlayerResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    OpenAPIAuthPlayer200Response Content;
};

/* Create player
 *
 * Create a new player for a game. Players are automatically associated with an internally managed wallet.  Player access tokens can be used to directly interact with any MetaFab managed contracts, currencies, items collections, marketplaces and more. Player interactions are also gasless by default, completely removing all crypto friction for players to engage with your MetaFab supported games.
*/
class OPENAPI_API OpenAPIPlayersApi::CreatePlayerRequest : public Request
{
public:
    virtual ~CreatePlayerRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

	/* The `publishedKey` of a specific game. This can be shared or included in game clients, websites, etc. */
	FString XGameKey;
	OpenAPICreatePlayerRequest OpenAPICreatePlayerRequest;
};

class OPENAPI_API OpenAPIPlayersApi::CreatePlayerResponse : public Response
{
public:
    virtual ~CreatePlayerResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    OpenAPIAuthPlayer200Response Content;
};

/* Get player
 *
 * Returns a player object for the provided player id.
*/
class OPENAPI_API OpenAPIPlayersApi::GetPlayerRequest : public Request
{
public:
    virtual ~GetPlayerRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

	/* Any player id within the MetaFab ecosystem. */
	FString PlayerId;
};

class OPENAPI_API OpenAPIPlayersApi::GetPlayerResponse : public Response
{
public:
    virtual ~GetPlayerResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    OpenAPIPublicPlayer Content;
};

/* Get player data
 *
 * Returns the latest public and protected data as an object for the provided playerId.
*/
class OPENAPI_API OpenAPIPlayersApi::GetPlayerDataRequest : public Request
{
public:
    virtual ~GetPlayerDataRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

	/* Any player id within the MetaFab ecosystem. */
	FString PlayerId;
};

class OPENAPI_API OpenAPIPlayersApi::GetPlayerDataResponse : public Response
{
public:
    virtual ~GetPlayerDataResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    OpenAPIGetPlayerData200Response Content;
};

/* Get players
 *
 * Returns all players for the authenticated game as an array of player objects.
*/
class OPENAPI_API OpenAPIPlayersApi::GetPlayersRequest : public Request
{
public:
    virtual ~GetPlayersRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

	/* The `secretKey` of the authenticating game. */
	FString XAuthorization;
};

class OPENAPI_API OpenAPIPlayersApi::GetPlayersResponse : public Response
{
public:
    virtual ~GetPlayersResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    TArray<OpenAPIPublicPlayer> Content;
};

/* Remove player connected wallet
 *
 * Removes an external wallet from a player account. The player&#39;s wallet is reverted to their custodial wallet.
*/
class OPENAPI_API OpenAPIPlayersApi::RemovePlayerConnectedWalletRequest : public Request
{
public:
    virtual ~RemovePlayerConnectedWalletRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

	/* Any player id within the MetaFab ecosystem. */
	FString PlayerId;
	/* Any player wallet id within the MetaFab ecosystem. */
	FString PlayerWalletId;
	OpenAPIRemovePlayerConnectedWalletRequest OpenAPIRemovePlayerConnectedWalletRequest;
};

class OPENAPI_API OpenAPIPlayersApi::RemovePlayerConnectedWalletResponse : public Response
{
public:
    virtual ~RemovePlayerConnectedWalletResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    
};

/* Set player connected wallet
 *
 * Sets an external wallet as the wallet for a player account. The set wallet can transact gaslessly with all MetaFab related systems through the same MetaFab API calls as custodial wallets without requiring transaction signing or private keys.  This is done through an internal system MetaFab has created that allows an external connected wallet to delegate transaction signing for a specific game&#39;s set of contracts to a player&#39;s password protected custodial wallet. This allow the custodial wallet to sign and submit transactions to a specific game&#39;s related contracts as if they were signed and submitted by the connected external wallet. This also means that all earned tokens, purchased items and any interactions happen and are recorded on chain as the external connected wallet. No additional logic needs to be writted by developers to support both custodial and external wallets, everything just works.  Finally, this endpoint is meant for advanced users. The majority of developers who want to implement external wallet support for their game can do so without any extra work through our whitelabeled wallet connection feature that implements this endpoint underneath the hood without any required work.
*/
class OPENAPI_API OpenAPIPlayersApi::SetPlayerConnectedWalletRequest : public Request
{
public:
    virtual ~SetPlayerConnectedWalletRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

	/* Any player id within the MetaFab ecosystem. */
	FString PlayerId;
	/* The `accessToken` of the authenticating player. */
	FString XAuthorization;
	OpenAPISetPlayerConnectedWalletRequest OpenAPISetPlayerConnectedWalletRequest;
};

class OPENAPI_API OpenAPIPlayersApi::SetPlayerConnectedWalletResponse : public Response
{
public:
    virtual ~SetPlayerConnectedWalletResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    OpenAPISetPlayerConnectedWallet200Response Content;
};

/* Set player data
 *
 * Creates or updates public and/or protected data for the provided playerId. Data updates are performed using deep merging. This means that when you update any top level or nested properties specific to player public or protected data, you only need to include the properties you are making changes to. Any existing properties not included in request body arguments will be retained on the player data object.  Please note, When writing an array type for a player, arrays do not follow the deep merge approach. If you add or remove an item from an array, the entire array must be passed as an argument when updating the related property for player public or protected data.
*/
class OPENAPI_API OpenAPIPlayersApi::SetPlayerDataRequest : public Request
{
public:
    virtual ~SetPlayerDataRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

	/* Any player id within the MetaFab ecosystem. */
	FString PlayerId;
	/* The `secretKey` of a specific game or the `accessToken` of a specific player. */
	FString XAuthorization;
	OpenAPISetPlayerDataRequest OpenAPISetPlayerDataRequest;
};

class OPENAPI_API OpenAPIPlayersApi::SetPlayerDataResponse : public Response
{
public:
    virtual ~SetPlayerDataResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    OpenAPIGetPlayerData200Response Content;
};

/* Update player
 *
 * Update various fields specific to a player. Such as changing its password and resetting its access token.
*/
class OPENAPI_API OpenAPIPlayersApi::UpdatePlayerRequest : public Request
{
public:
    virtual ~UpdatePlayerRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

	/* Any player id within the MetaFab ecosystem. */
	FString PlayerId;
	/* The `accessToken` of the authenticating player. */
	FString XAuthorization;
	OpenAPIUpdatePlayerRequest OpenAPIUpdatePlayerRequest;
};

class OPENAPI_API OpenAPIPlayersApi::UpdatePlayerResponse : public Response
{
public:
    virtual ~UpdatePlayerResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    OpenAPIPlayerModel Content;
};

}
