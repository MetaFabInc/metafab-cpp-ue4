/**
 * MetaFab API
 *  Complete MetaFab API references and guides can be found at: https://trymetafab.com
 *
 * OpenAPI spec version: 1.3.0
 * Contact: metafabproject@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#pragma once

#include "OpenAPIBaseModel.h"
#include "OpenAPIPlayersApi.h"

#include "OpenAPIAuthPlayer200Response.h"
#include "OpenAPICreatePlayerRequest.h"
#include "OpenAPIGetPlayerData200Response.h"
#include "OpenAPIPlayerModel.h"
#include "OpenAPIPublicPlayer.h"
#include "OpenAPISetPlayerDataRequest.h"
#include "OpenAPIUpdatePlayerRequest.h"

namespace MetaFab
{

/* Authenticate player
 *
 * Returns an existing player object containing access token, wallet, and other details for a game when provided a valid username and password login using Basic Auth.
*/
class METAFAB_API OpenAPIPlayersApi::AuthPlayerRequest : public Request
{
public:
    virtual ~AuthPlayerRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

	/* The `publishedKey` of a specific game. This can be shared or included in game clients, websites, etc. */
	FString XGameKey;
};

class METAFAB_API OpenAPIPlayersApi::AuthPlayerResponse : public Response
{
public:
    virtual ~AuthPlayerResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    OpenAPIAuthPlayer200Response Content;
};

/* Create player
 *
 * Create a new player for a game. Players are automatically associated with an internally managed wallet.  Player access tokens can be used to directly interact with any MetaFab managed contracts, currencies, items collections, marketplaces and more. Player interactions are also gasless by default, completely removing all crypto friction for players to engage with your MetaFab supported games.
*/
class METAFAB_API OpenAPIPlayersApi::CreatePlayerRequest : public Request
{
public:
    virtual ~CreatePlayerRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

	/* The `publishedKey` of a specific game. This can be shared or included in game clients, websites, etc. */
	FString XGameKey;
	OpenAPICreatePlayerRequest OpenAPICreatePlayerRequest;
};

class METAFAB_API OpenAPIPlayersApi::CreatePlayerResponse : public Response
{
public:
    virtual ~CreatePlayerResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    OpenAPIAuthPlayer200Response Content;
};

/* Get player
 *
 * Returns a player object for the provided player id.
*/
class METAFAB_API OpenAPIPlayersApi::GetPlayerRequest : public Request
{
public:
    virtual ~GetPlayerRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

	/* Any player id within the MetaFab ecosystem. */
	FString PlayerId;
};

class METAFAB_API OpenAPIPlayersApi::GetPlayerResponse : public Response
{
public:
    virtual ~GetPlayerResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    OpenAPIPublicPlayer Content;
};

/* Get player data
 *
 * Returns the latest public and protected data as an object for the provided playerId.
*/
class METAFAB_API OpenAPIPlayersApi::GetPlayerDataRequest : public Request
{
public:
    virtual ~GetPlayerDataRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

	/* Any player id within the MetaFab ecosystem. */
	FString PlayerId;
};

class METAFAB_API OpenAPIPlayersApi::GetPlayerDataResponse : public Response
{
public:
    virtual ~GetPlayerDataResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    OpenAPIGetPlayerData200Response Content;
};

/* Get players
 *
 * Returns all players for the authenticated game as an array of player objects.
*/
class METAFAB_API OpenAPIPlayersApi::GetPlayersRequest : public Request
{
public:
    virtual ~GetPlayersRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

	/* The `secretKey` of the authenticating game. */
	FString XAuthorization;
};

class METAFAB_API OpenAPIPlayersApi::GetPlayersResponse : public Response
{
public:
    virtual ~GetPlayersResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    TArray<OpenAPIPublicPlayer> Content;
};

/* Set player data
 *
 * Creates or updates public and/or protected data for the provided playerId. Data updates are performed using deep merging. This means that when you update any top level or nested properties specific to player public or protected data, you only need to include the properties you are making changes to. Any existing properties not included in request body arguments will be retained on the player data object.  Please note, When writing an array type for a player, arrays do not follow the deep merge approach. If you add or remove an item from an array, the entire array must be passed as an argument when updating the related property for player public or protected data.
*/
class METAFAB_API OpenAPIPlayersApi::SetPlayerDataRequest : public Request
{
public:
    virtual ~SetPlayerDataRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

	/* Any player id within the MetaFab ecosystem. */
	FString PlayerId;
	/* The `secretKey` of a specific game or the `accessToken` of a specific player. */
	FString XAuthorization;
	OpenAPISetPlayerDataRequest OpenAPISetPlayerDataRequest;
};

class METAFAB_API OpenAPIPlayersApi::SetPlayerDataResponse : public Response
{
public:
    virtual ~SetPlayerDataResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    OpenAPIGetPlayerData200Response Content;
};

/* Update player
 *
 * Update various fields specific to a player. Such as changing its password and resetting its access token.
*/
class METAFAB_API OpenAPIPlayersApi::UpdatePlayerRequest : public Request
{
public:
    virtual ~UpdatePlayerRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

	/* Any player id within the MetaFab ecosystem. */
	FString PlayerId;
	/* The `accessToken` of the authenticating player. */
	FString XAuthorization;
	OpenAPIUpdatePlayerRequest OpenAPIUpdatePlayerRequest;
};

class METAFAB_API OpenAPIPlayersApi::UpdatePlayerResponse : public Response
{
public:
    virtual ~UpdatePlayerResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    OpenAPIPlayerModel Content;
};

}
