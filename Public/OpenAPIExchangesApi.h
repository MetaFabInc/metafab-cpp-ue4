/**
 * MetaFab API
 *  Complete MetaFab API references and guides can be found at: https://trymetafab.com
 *
 * OpenAPI spec version: 1.2.1
 * Contact: metafabproject@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#pragma once

#include "CoreMinimal.h"
#include "OpenAPIBaseModel.h"

namespace MetaFab
{

class METAFAB_API OpenAPIExchangesApi
{
public:
	OpenAPIExchangesApi();
	~OpenAPIExchangesApi();

	/* Sets the URL Endpoint.
	* Note: several fallback endpoints can be configured in request retry policies, see Request::SetShouldRetry */
	void SetURL(const FString& Url);

	/* Adds global header params to all requests */
	void AddHeaderParam(const FString& Key, const FString& Value);
	void ClearHeaderParams();

	/* Sets the retry manager to the user-defined retry manager. User must manage the lifetime of the retry manager.
	* If no retry manager is specified and a request needs retries, a default retry manager will be used.
	* See also: Request::SetShouldRetry */
	void SetHttpRetryManager(FHttpRetrySystem::FManager& RetryManager);
	FHttpRetrySystem::FManager& GetHttpRetryManager();

	class CreateExchangeRequest;
	class CreateExchangeResponse;
	class GetExchangeOfferRequest;
	class GetExchangeOfferResponse;
	class GetExchangeOffersRequest;
	class GetExchangeOffersResponse;
	class GetExchangesRequest;
	class GetExchangesResponse;
	class RemoveExchangeOfferRequest;
	class RemoveExchangeOfferResponse;
	class SetExchangeOfferRequest;
	class SetExchangeOfferResponse;
	class UseExchangeOfferRequest;
	class UseExchangeOfferResponse;
	class WithdrawFromExchangeRequest;
	class WithdrawFromExchangeResponse;
	
    DECLARE_DELEGATE_OneParam(FCreateExchangeDelegate, const CreateExchangeResponse&);
    DECLARE_DELEGATE_OneParam(FGetExchangeOfferDelegate, const GetExchangeOfferResponse&);
    DECLARE_DELEGATE_OneParam(FGetExchangeOffersDelegate, const GetExchangeOffersResponse&);
    DECLARE_DELEGATE_OneParam(FGetExchangesDelegate, const GetExchangesResponse&);
    DECLARE_DELEGATE_OneParam(FRemoveExchangeOfferDelegate, const RemoveExchangeOfferResponse&);
    DECLARE_DELEGATE_OneParam(FSetExchangeOfferDelegate, const SetExchangeOfferResponse&);
    DECLARE_DELEGATE_OneParam(FUseExchangeOfferDelegate, const UseExchangeOfferResponse&);
    DECLARE_DELEGATE_OneParam(FWithdrawFromExchangeDelegate, const WithdrawFromExchangeResponse&);
    
    FHttpRequestPtr CreateExchange(const CreateExchangeRequest& Request, const FCreateExchangeDelegate& Delegate = FCreateExchangeDelegate()) const;
    FHttpRequestPtr GetExchangeOffer(const GetExchangeOfferRequest& Request, const FGetExchangeOfferDelegate& Delegate = FGetExchangeOfferDelegate()) const;
    FHttpRequestPtr GetExchangeOffers(const GetExchangeOffersRequest& Request, const FGetExchangeOffersDelegate& Delegate = FGetExchangeOffersDelegate()) const;
    FHttpRequestPtr GetExchanges(const GetExchangesRequest& Request, const FGetExchangesDelegate& Delegate = FGetExchangesDelegate()) const;
    FHttpRequestPtr RemoveExchangeOffer(const RemoveExchangeOfferRequest& Request, const FRemoveExchangeOfferDelegate& Delegate = FRemoveExchangeOfferDelegate()) const;
    FHttpRequestPtr SetExchangeOffer(const SetExchangeOfferRequest& Request, const FSetExchangeOfferDelegate& Delegate = FSetExchangeOfferDelegate()) const;
    FHttpRequestPtr UseExchangeOffer(const UseExchangeOfferRequest& Request, const FUseExchangeOfferDelegate& Delegate = FUseExchangeOfferDelegate()) const;
    FHttpRequestPtr WithdrawFromExchange(const WithdrawFromExchangeRequest& Request, const FWithdrawFromExchangeDelegate& Delegate = FWithdrawFromExchangeDelegate()) const;
    
private:
    void OnCreateExchangeResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FCreateExchangeDelegate Delegate) const;
    void OnGetExchangeOfferResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FGetExchangeOfferDelegate Delegate) const;
    void OnGetExchangeOffersResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FGetExchangeOffersDelegate Delegate) const;
    void OnGetExchangesResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FGetExchangesDelegate Delegate) const;
    void OnRemoveExchangeOfferResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FRemoveExchangeOfferDelegate Delegate) const;
    void OnSetExchangeOfferResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FSetExchangeOfferDelegate Delegate) const;
    void OnUseExchangeOfferResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FUseExchangeOfferDelegate Delegate) const;
    void OnWithdrawFromExchangeResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FWithdrawFromExchangeDelegate Delegate) const;
    
	FHttpRequestRef CreateHttpRequest(const Request& Request) const;
	bool IsValid() const;
	void HandleResponse(FHttpResponsePtr HttpResponse, bool bSucceeded, Response& InOutResponse) const;

	FString Url;
	TMap<FString,FString> AdditionalHeaderParams;
	mutable FHttpRetrySystem::FManager* RetryManager = nullptr;
	mutable TUniquePtr<HttpRetryManager> DefaultRetryManager;
};

}
