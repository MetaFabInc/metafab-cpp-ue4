/**
 * MetaFab API
 * Complete MetaFab API references and guides can be found at: https://trymetafab.com
 *
 * OpenAPI spec version: 1.5.1
 * Contact: metafabproject@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#pragma once

#include "CoreMinimal.h"
#include "OpenAPIBaseModel.h"

namespace OpenAPI
{

class OPENAPI_API OpenAPILootboxesApi
{
public:
	OpenAPILootboxesApi();
	~OpenAPILootboxesApi();

	/* Sets the URL Endpoint.
	* Note: several fallback endpoints can be configured in request retry policies, see Request::SetShouldRetry */
	void SetURL(const FString& Url);

	/* Adds global header params to all requests */
	void AddHeaderParam(const FString& Key, const FString& Value);
	void ClearHeaderParams();

	/* Sets the retry manager to the user-defined retry manager. User must manage the lifetime of the retry manager.
	* If no retry manager is specified and a request needs retries, a default retry manager will be used.
	* See also: Request::SetShouldRetry */
	void SetHttpRetryManager(FHttpRetrySystem::FManager& RetryManager);
	FHttpRetrySystem::FManager& GetHttpRetryManager();

	class CreateLootboxManagerRequest;
	class CreateLootboxManagerResponse;
	class GetLootboxManagerLootboxRequest;
	class GetLootboxManagerLootboxResponse;
	class GetLootboxManagerLootboxesRequest;
	class GetLootboxManagerLootboxesResponse;
	class GetLootboxManagersRequest;
	class GetLootboxManagersResponse;
	class OpenLootboxManagerLootboxRequest;
	class OpenLootboxManagerLootboxResponse;
	class RemoveLootboxManagerLootboxRequest;
	class RemoveLootboxManagerLootboxResponse;
	class SetLootboxManagerLootboxRequest;
	class SetLootboxManagerLootboxResponse;
	
    DECLARE_DELEGATE_OneParam(FCreateLootboxManagerDelegate, const CreateLootboxManagerResponse&);
    DECLARE_DELEGATE_OneParam(FGetLootboxManagerLootboxDelegate, const GetLootboxManagerLootboxResponse&);
    DECLARE_DELEGATE_OneParam(FGetLootboxManagerLootboxesDelegate, const GetLootboxManagerLootboxesResponse&);
    DECLARE_DELEGATE_OneParam(FGetLootboxManagersDelegate, const GetLootboxManagersResponse&);
    DECLARE_DELEGATE_OneParam(FOpenLootboxManagerLootboxDelegate, const OpenLootboxManagerLootboxResponse&);
    DECLARE_DELEGATE_OneParam(FRemoveLootboxManagerLootboxDelegate, const RemoveLootboxManagerLootboxResponse&);
    DECLARE_DELEGATE_OneParam(FSetLootboxManagerLootboxDelegate, const SetLootboxManagerLootboxResponse&);
    
    FHttpRequestPtr CreateLootboxManager(const CreateLootboxManagerRequest& Request, const FCreateLootboxManagerDelegate& Delegate = FCreateLootboxManagerDelegate()) const;
    FHttpRequestPtr GetLootboxManagerLootbox(const GetLootboxManagerLootboxRequest& Request, const FGetLootboxManagerLootboxDelegate& Delegate = FGetLootboxManagerLootboxDelegate()) const;
    FHttpRequestPtr GetLootboxManagerLootboxes(const GetLootboxManagerLootboxesRequest& Request, const FGetLootboxManagerLootboxesDelegate& Delegate = FGetLootboxManagerLootboxesDelegate()) const;
    FHttpRequestPtr GetLootboxManagers(const GetLootboxManagersRequest& Request, const FGetLootboxManagersDelegate& Delegate = FGetLootboxManagersDelegate()) const;
    FHttpRequestPtr OpenLootboxManagerLootbox(const OpenLootboxManagerLootboxRequest& Request, const FOpenLootboxManagerLootboxDelegate& Delegate = FOpenLootboxManagerLootboxDelegate()) const;
    FHttpRequestPtr RemoveLootboxManagerLootbox(const RemoveLootboxManagerLootboxRequest& Request, const FRemoveLootboxManagerLootboxDelegate& Delegate = FRemoveLootboxManagerLootboxDelegate()) const;
    FHttpRequestPtr SetLootboxManagerLootbox(const SetLootboxManagerLootboxRequest& Request, const FSetLootboxManagerLootboxDelegate& Delegate = FSetLootboxManagerLootboxDelegate()) const;
    
private:
    void OnCreateLootboxManagerResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FCreateLootboxManagerDelegate Delegate) const;
    void OnGetLootboxManagerLootboxResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FGetLootboxManagerLootboxDelegate Delegate) const;
    void OnGetLootboxManagerLootboxesResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FGetLootboxManagerLootboxesDelegate Delegate) const;
    void OnGetLootboxManagersResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FGetLootboxManagersDelegate Delegate) const;
    void OnOpenLootboxManagerLootboxResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FOpenLootboxManagerLootboxDelegate Delegate) const;
    void OnRemoveLootboxManagerLootboxResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FRemoveLootboxManagerLootboxDelegate Delegate) const;
    void OnSetLootboxManagerLootboxResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FSetLootboxManagerLootboxDelegate Delegate) const;
    
	FHttpRequestRef CreateHttpRequest(const Request& Request) const;
	bool IsValid() const;
	void HandleResponse(FHttpResponsePtr HttpResponse, bool bSucceeded, Response& InOutResponse) const;

	FString Url;
	TMap<FString,FString> AdditionalHeaderParams;
	mutable FHttpRetrySystem::FManager* RetryManager = nullptr;
	mutable TUniquePtr<HttpRetryManager> DefaultRetryManager;
};

}
