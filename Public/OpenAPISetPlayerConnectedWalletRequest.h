/**
 * MetaFab API
 *  Complete MetaFab API references and guides can be found at: https://trymetafab.com
 *
 * OpenAPI spec version: 1.4.0
 * Contact: metafabproject@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#pragma once

#include "OpenAPIBaseModel.h"

namespace OpenAPI
{

/*
 * OpenAPISetPlayerConnectedWalletRequest
 *
 * 
 */
class OPENAPI_API OpenAPISetPlayerConnectedWalletRequest : public Model
{
public:
    virtual ~OpenAPISetPlayerConnectedWalletRequest() {}
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;
	void WriteJson(JsonWriter& Writer) const final;

	/* The address of the external wallet to connect to the player. */
	FString Address;
	/* Any positive integer that hasn't been used previously to connect or disconnect this external wallet. Must be the same nonce used to generate the `signature`. */
	int32 Nonce = 0;
	/* A signature string generated by signing a keccak256 hash generated with abiCoder encode arguments of `[ 'bytes32', 'address', 'bool', 'address', 'uint256' ]` and `[ keccak256(gameId), delegate wallet approved (player's custodial wallet address), true, external wallet address, any unused nonce number ]`. */
	FString Signature;
	enum class ChainEnum
	{
		Ethereum,
		Goerli,
		Matic,
		Maticmumbai,
		Arbitrum,
		Arbitrumgoerli,
  	};

	static FString EnumToString(const ChainEnum& EnumValue);
	static bool EnumFromString(const FString& EnumAsString, ChainEnum& EnumValue);
	/* The blockchain you want to support this wallet connection on. If you need to support multiple blockchains, make multiple requests using different `chain` arguments. Support for new blockchains are added over time. */
	ChainEnum Chain;
};

}
