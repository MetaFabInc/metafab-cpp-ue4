/**
 * MetaFab API
 * Complete MetaFab API references and guides can be found at: https://trymetafab.com
 *
 * OpenAPI spec version: 1.5.1
 * Contact: metafabproject@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#pragma once

#include "OpenAPIBaseModel.h"

namespace OpenAPI
{

/*
 * OpenAPIUpdateEcosystemRequest
 *
 * 
 */
class OPENAPI_API OpenAPIUpdateEcosystemRequest : public Model
{
public:
    virtual ~OpenAPIUpdateEcosystemRequest() {}
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;
	void WriteJson(JsonWriter& Writer) const final;

	/* A new name. Replaces the ecosystem's current name. */
	TOptional<FString> Name;
	/* A new email address. The ecosystem's old email will no longer be valid for account authentication. `currentPassword` must also be provided. */
	TOptional<FString> Email;
	/* The ecosystem's current password. Must be provided if setting `newPassword` or `email`. */
	TOptional<FString> CurrentPassword;
	/* A new password. The ecosystem's old password will no longer be valid. */
	TOptional<FString> NewPassword;
	/* A base64 string of the icon image for this ecosystem. Supported image formats are `jpg`, `jpeg`, `png`, `gif` Recommended size is 512x512 pixels, or 1:1 aspect ratio. This image is used for your profile authorization flow and other MetaFab features for your ecosystem. */
	TOptional<FString> IconImageBase64;
	/* A base64 string of the cover image for this ecosystem. Supported image formats are `jpg`, `jpeg`, `png`, `gif`. Recommended size is 1600x1000 pixels, or 16:10 aspect ratio.  This image is used as the background image for your profile authorization flow and other MetaFab features for your ecosystem. */
	TOptional<FString> CoverImageBase64;
	/* A valid hex color code. This color is used for your profile authorization flow to control the color of buttons and other brandable MetaFab features for your ecosystem. */
	TOptional<FString> PrimaryColorHex;
	/* Revokes the ecosystem's previous published key and returns a new one if true. */
	TOptional<bool> ResetPublishedKey;
	/* Revokes the ecosystem's previous secret key and returns a new on if true. */
	TOptional<bool> ResetSecretKey;
};

}
