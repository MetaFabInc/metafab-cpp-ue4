/**
 * MetaFab API
 *  Complete MetaFab API references and guides can be found at: https://trymetafab.com
 *
 * OpenAPI spec version: 1.3.0
 * Contact: metafabproject@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#include "OpenAPIWithdrawFromShopRequest.h"

#include "MetaFabModule.h"
#include "OpenAPIHelpers.h"

#include "Templates/SharedPointer.h"

namespace MetaFab
{

void OpenAPIWithdrawFromShopRequest::WriteJson(JsonWriter& Writer) const
{
	Writer->WriteObjectStart();
	if (Address.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("address")); WriteJsonValue(Writer, Address.GetValue());
	}
	if (WalletId.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("walletId")); WriteJsonValue(Writer, WalletId.GetValue());
	}
	if (CurrencyAddress.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("currencyAddress")); WriteJsonValue(Writer, CurrencyAddress.GetValue());
	}
	if (CurrencyId.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("currencyId")); WriteJsonValue(Writer, CurrencyId.GetValue());
	}
	if (CollectionAddress.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("collectionAddress")); WriteJsonValue(Writer, CollectionAddress.GetValue());
	}
	if (CollectionId.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("collectionId")); WriteJsonValue(Writer, CollectionId.GetValue());
	}
	if (ItemIds.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("itemIds")); WriteJsonValue(Writer, ItemIds.GetValue());
	}
	Writer->WriteObjectEnd();
}

bool OpenAPIWithdrawFromShopRequest::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	const TSharedPtr<FJsonObject>* Object;
	if (!JsonValue->TryGetObject(Object))
		return false;

	bool ParseSuccess = true;

	ParseSuccess &= TryGetJsonValue(*Object, TEXT("address"), Address);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("walletId"), WalletId);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("currencyAddress"), CurrencyAddress);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("currencyId"), CurrencyId);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("collectionAddress"), CollectionAddress);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("collectionId"), CollectionId);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("itemIds"), ItemIds);

	return ParseSuccess;
}

}
