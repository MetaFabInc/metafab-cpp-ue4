/**
 * MetaFab API
 * Complete MetaFab API references and guides can be found at: https://trymetafab.com
 *
 * OpenAPI spec version: 1.5.1
 * Contact: metafabproject@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#include "OpenAPIGameModel.h"

#include "OpenAPIModule.h"
#include "OpenAPIHelpers.h"

#include "Templates/SharedPointer.h"

namespace OpenAPI
{

void OpenAPIGameModel::WriteJson(JsonWriter& Writer) const
{
	Writer->WriteObjectStart();
	if (Id.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("id")); WriteJsonValue(Writer, Id.GetValue());
	}
	if (WalletId.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("walletId")); WriteJsonValue(Writer, WalletId.GetValue());
	}
	if (FundingWalletId.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("fundingWalletId")); WriteJsonValue(Writer, FundingWalletId.GetValue());
	}
	if (Email.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("email")); WriteJsonValue(Writer, Email.GetValue());
	}
	if (Name.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("name")); WriteJsonValue(Writer, Name.GetValue());
	}
	if (Rpcs.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("rpcs")); WriteJsonValue(Writer, Rpcs.GetValue());
	}
	if (RedirectUris.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("redirectUris")); WriteJsonValue(Writer, RedirectUris.GetValue());
	}
	if (IconImageUrl.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("iconImageUrl")); WriteJsonValue(Writer, IconImageUrl.GetValue());
	}
	if (CoverImageUrl.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("coverImageUrl")); WriteJsonValue(Writer, CoverImageUrl.GetValue());
	}
	if (PrimaryColorHex.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("primaryColorHex")); WriteJsonValue(Writer, PrimaryColorHex.GetValue());
	}
	if (PublishedKey.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("publishedKey")); WriteJsonValue(Writer, PublishedKey.GetValue());
	}
	if (SecretKey.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("secretKey")); WriteJsonValue(Writer, SecretKey.GetValue());
	}
	if (Verified.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("verified")); WriteJsonValue(Writer, Verified.GetValue());
	}
	if (UpdatedAt.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("updatedAt")); WriteJsonValue(Writer, UpdatedAt.GetValue());
	}
	if (CreatedAt.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("createdAt")); WriteJsonValue(Writer, CreatedAt.GetValue());
	}
	Writer->WriteObjectEnd();
}

bool OpenAPIGameModel::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	const TSharedPtr<FJsonObject>* Object;
	if (!JsonValue->TryGetObject(Object))
		return false;

	bool ParseSuccess = true;

	ParseSuccess &= TryGetJsonValue(*Object, TEXT("id"), Id);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("walletId"), WalletId);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("fundingWalletId"), FundingWalletId);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("email"), Email);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("name"), Name);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("rpcs"), Rpcs);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("redirectUris"), RedirectUris);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("iconImageUrl"), IconImageUrl);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("coverImageUrl"), CoverImageUrl);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("primaryColorHex"), PrimaryColorHex);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("publishedKey"), PublishedKey);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("secretKey"), SecretKey);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("verified"), Verified);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("updatedAt"), UpdatedAt);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("createdAt"), CreatedAt);

	return ParseSuccess;
}

}
