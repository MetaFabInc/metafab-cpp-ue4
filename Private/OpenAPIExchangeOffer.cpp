/**
 * MetaFab API
 *  Complete MetaFab API references and guides can be found at: https://trymetafab.com
 *
 * OpenAPI spec version: 1.2.1
 * Contact: metafabproject@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#include "OpenAPIExchangeOffer.h"

#include "MetaFabModule.h"
#include "OpenAPIHelpers.h"

#include "Templates/SharedPointer.h"

namespace MetaFab
{

void OpenAPIExchangeOffer::WriteJson(JsonWriter& Writer) const
{
	Writer->WriteObjectStart();
	if (Id.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("id")); WriteJsonValue(Writer, Id.GetValue());
	}
	if (InputCollection.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("inputCollection")); WriteJsonValue(Writer, InputCollection.GetValue());
	}
	if (InputCollectionItemIds.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("inputCollectionItemIds")); WriteJsonValue(Writer, InputCollectionItemIds.GetValue());
	}
	if (InputCollectionItemAmounts.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("inputCollectionItemAmounts")); WriteJsonValue(Writer, InputCollectionItemAmounts.GetValue());
	}
	if (InputCurrency.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("inputCurrency")); WriteJsonValue(Writer, InputCurrency.GetValue());
	}
	if (InputCurrencyAmount.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("inputCurrencyAmount")); WriteJsonValue(Writer, InputCurrencyAmount.GetValue());
	}
	if (OutputCollection.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("outputCollection")); WriteJsonValue(Writer, OutputCollection.GetValue());
	}
	if (OutputCollectionItemIds.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("outputCollectionItemIds")); WriteJsonValue(Writer, OutputCollectionItemIds.GetValue());
	}
	if (OutputCollectionItemAmounts.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("outputCollectionItemAmounts")); WriteJsonValue(Writer, OutputCollectionItemAmounts.GetValue());
	}
	if (OutputCurrency.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("outputCurrency")); WriteJsonValue(Writer, OutputCurrency.GetValue());
	}
	if (OutputCurrencyAmount.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("outputCurrencyAmount")); WriteJsonValue(Writer, OutputCurrencyAmount.GetValue());
	}
	if (Uses.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("uses")); WriteJsonValue(Writer, Uses.GetValue());
	}
	if (MaxUses.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("maxUses")); WriteJsonValue(Writer, MaxUses.GetValue());
	}
	if (LastUpdatedAt.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("lastUpdatedAt")); WriteJsonValue(Writer, LastUpdatedAt.GetValue());
	}
	Writer->WriteObjectEnd();
}

bool OpenAPIExchangeOffer::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	const TSharedPtr<FJsonObject>* Object;
	if (!JsonValue->TryGetObject(Object))
		return false;

	bool ParseSuccess = true;

	ParseSuccess &= TryGetJsonValue(*Object, TEXT("id"), Id);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("inputCollection"), InputCollection);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("inputCollectionItemIds"), InputCollectionItemIds);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("inputCollectionItemAmounts"), InputCollectionItemAmounts);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("inputCurrency"), InputCurrency);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("inputCurrencyAmount"), InputCurrencyAmount);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("outputCollection"), OutputCollection);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("outputCollectionItemIds"), OutputCollectionItemIds);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("outputCollectionItemAmounts"), OutputCollectionItemAmounts);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("outputCurrency"), OutputCurrency);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("outputCurrencyAmount"), OutputCurrencyAmount);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("uses"), Uses);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("maxUses"), MaxUses);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("lastUpdatedAt"), LastUpdatedAt);

	return ParseSuccess;
}

}
